{"version":3,"sources":["services/currencyApi.js","actions/index.js","pages/Login.js","components/TextInputs.jsx","components/Form.jsx","components/Header.jsx","components/ExpensesTable.jsx","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["fetchCurrencyApi","Promise","resolve","fetch","then","result","json","data","getCurrency","currencies","object","type","payload","currency","Object","keys","filter","calculateTotal","value","Login","props","validatePassword","bind","validateEmail","validateButton","btnClick","state","disabled","email","password","emailValidation","passwordValidation","this","setState","event","target","match","length","userDispatch","name","onChange","placeholder","data-testid","to","onClick","React","Component","connect","dispatch","userLogin","TextInputs","handleChange","description","htmlFor","id","Form","payment","types","method","tag","expense","expenseGlobal","globalTotal","total","fetchAPI","currentExpense","exchangeRates","findCurrency","entries","find","element","newTotal","Number","ask","toFixed","map","curr","key","pay","wallet","expenses","exchangeRate","addExpense","Header","user","ExpensesTable","deleteExpense","tableHeading","remove","newExpenses","currExpense","currName","transf","sub","headingText","split","parseFloat","removeExpense","Wallet","App","exact","path","component","login","Boolean","window","location","hostname","INITIAL_STATE","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6cfe8873.chunk.js","sourcesContent":["const fetchCurrencyApi = () => (\n  new Promise((resolve) => {\n    fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((result) => {\n        result.json().then((data) => {\n          resolve(data);\n        });\n      });\n  })\n);//\n\nexport default fetchCurrencyApi;\n","import fetchCurrencyApi from '../services/currencyApi';\n\nexport const USER_LOGIN = 'USER_LOGIN';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const GET_CURRENCY = 'GET_CURRENCY';\nexport const TOTAL_UPDATE = 'TOTAL_UPDATE';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\n\nexport const userLogin = (email) => ({\n  type: USER_LOGIN,\n  payload: {\n    email,\n  },\n});\n\nexport const addExpense = (expense) => ({\n  type: ADD_EXPENSE,\n  payload: {\n    expense,\n  },\n});\n\nexport const removeExpense = (expenses) => ({\n  type: REMOVE_EXPENSE,\n  payload: {\n    expenses,\n  },\n});\n\nconst toCurrencyArray = (object) => Object.keys(object);\n\nexport const getCurrency = (currencies) => {\n  const currenciesArray = toCurrencyArray(currencies);\n  const currenciesFilter = currenciesArray.filter((currency) => currency !== 'USDT');\n  return ({\n    type: GET_CURRENCY,\n    payload: {\n      currency: currenciesFilter,\n    },\n  });\n};\n\nexport const getCurrencyThunk = () => (dispatch) => {\n  fetchCurrencyApi()\n    .then((result) => {\n      dispatch(getCurrency(result));\n    });\n};\n\nexport const calculateTotal = (value) => ({\n  type: TOTAL_UPDATE,\n  payload: {\n    value,\n  },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { userLogin } from '../actions';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.validatePassword = this.validatePassword.bind(this);\n    this.validateEmail = this.validateEmail.bind(this);\n    this.validateButton = this.validateButton.bind(this);\n    this.btnClick = this.btnClick.bind(this);\n    this.state = {\n      disabled: true,\n      email: '',\n      password: '',\n      emailValidation: false,\n      passwordValidation: false,\n    };\n  }\n\n  validateButton() {\n    const { emailValidation, passwordValidation } = this.state;\n    if (emailValidation && passwordValidation) {\n      this.setState({ disabled: false });\n    } else { this.setState({ disabled: true }); }\n  }\n\n  validateEmail(event) {\n    const { value } = event.target;\n    this.setState({ email: value });\n    const { email } = this.state;\n    const eForm = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)/;\n    if (email.match(eForm)) {\n      this.setState({ emailValidation: true }, () => {\n        this.validateButton();\n      });\n    } else this.setState({ emailValidation: false });\n  }\n\n  validatePassword(event) {\n    const { value } = event.target;\n    const { password } = this.state;\n    this.setState({ password: value });\n    const PASSWORD_LENGTH = 5;\n    if (password.length >= PASSWORD_LENGTH) {\n      this.setState({ passwordValidation: true }, () => {\n        this.validateButton();\n      });\n    } else { this.setState({ passwordValidation: false }); }\n  }\n\n  btnClick() {\n    const { userDispatch } = this.props;\n    const { email } = this.state;\n    userDispatch(email);\n  }\n\n  render() {\n    const { disabled, password, email } = this.state;\n    return (\n      <>\n        <input\n          type=\"text\"\n          name=\"email\"\n          onChange={ this.validateEmail }\n          value={ email }\n          placeholder=\"User\"\n          data-testid=\"email-input\"\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          onChange={ this.validatePassword }\n          value={ password }\n          placeholder=\"Password\"\n          data-testid=\"password-input\"\n        />\n        <Link to=\"/expenses-wallet-project/carteira\">\n          <button\n            type=\"button\"\n            disabled={ disabled }\n            onClick={ this.btnClick }\n          >\n            Entrar\n          </button>\n        </Link>\n      </>\n    );\n  }\n}\n\nLogin.propTypes = {\n  userDispatch: PropTypes.string,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  userDispatch: (email) => dispatch(userLogin(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TextInputs extends React.Component {\n  render() {\n    const { handleChange, value, description } = this.props;\n    return (\n      <>\n        <label htmlFor=\"value-input\">\n          Valor\n          <input\n            type=\"text\"\n            id=\"value-input\"\n            onChange={ handleChange }\n            name=\"value\"\n            value={ value }\n          />\n        </label>\n        <label htmlFor=\"description-input\">\n          Descrição\n          <input\n            type=\"text\"\n            id=\"description-input\"\n            onChange={ handleChange }\n            name=\"description\"\n            value={ description }\n          />\n        </label>\n      </>\n    );\n  }\n}\n\nTextInputs.propTypes = {\n  handleChange: PropTypes.func,\n  value: PropTypes.string,\n  description: PropTypes.string,\n}.isRequired;\n\nexport default TextInputs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getCurrencyThunk, addExpense, calculateTotal } from '../actions';\nimport TextInputs from './TextInputs';\nimport fetchCurrencyApi from '../services/currencyApi';\n\nclass Form extends React.Component {\n  constructor() {\n    super();\n    this.onClick = this.onClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    const ALIMENTAÇÃO = 'Alimentação';\n    this.state = {\n      payment: ['Dinheiro',\n        'Cartão de débito',\n        'Cartão de crédito'],\n      types: [ALIMENTAÇÃO,\n        'Lazer',\n        'Trabalho',\n        'Transporte',\n        'Saúde',\n      ],\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: ALIMENTAÇÃO,\n    };\n  }\n\n  componentDidMount() {\n    const { currency } = this.props;\n    currency();\n  }\n\n  async onClick() {\n    const { value, description, currency, method, tag } = this.state;\n    const { expense, expenseGlobal, globalTotal, total } = this.props;\n    const fetchAPI = await fetchCurrencyApi();\n    const currentExpense = {\n      id: expenseGlobal.length,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates: fetchAPI,\n    };\n    expense(currentExpense);\n\n    const findCurrency = Object.entries(currentExpense.exchangeRates).find(\n      (element) => element[0] === currency,\n    );\n    const newTotal = Number(globalTotal) + (Number(findCurrency[1].ask) * Number(value));\n    total(newTotal.toFixed(2));\n\n    this.setState({\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    });\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { payment, types, value, description, currency, method, tag } = this.state;\n    const { currencies } = this.props;\n    return (\n      <form>\n        <TextInputs\n          handleChange={ this.handleChange }\n          value={ value }\n          description={ description }\n        />\n        <label htmlFor=\"currency-select\">\n          Moeda\n          <select\n            id=\"currency-select\"\n            onChange={ this.handleChange }\n            name=\"currency\"\n            value={ currency }\n          >\n            {currencies.map((curr, key) => <option key={ key }>{curr}</option>)}\n          </select>\n        </label>\n        <label htmlFor=\"payment-type\">\n          Método de pagamento\n          <select\n            id=\"payment-type\"\n            onChange={ this.handleChange }\n            name=\"method\"\n            value={ method }\n          >\n            {payment.map((pay, key) => <option key={ key }>{pay}</option>)}\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Tag\n          <select\n            id=\"tag\"\n            onChange={ this.handleChange }\n            name=\"tag\"\n            value={ tag }\n          >\n            {types.map((type, key) => <option key={ key }>{type}</option>)}\n          </select>\n        </label>\n        <button type=\"button\" onClick={ this.onClick }>Adicionar despesa</button>\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  currencies: PropTypes.array,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  currency: () => dispatch(getCurrencyThunk()),\n  expense: (expenses) => dispatch(addExpense(expenses)),\n  total: (total) => dispatch(calculateTotal(total)),\n});\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  expenseGlobal: state.wallet.expenses,\n  exchangeRates: state.wallet.exchangeRate,\n  globalTotal: state.wallet.total,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  render() {\n    const { email, total = 0 } = this.props;\n    return (\n      <header>\n        <span>Olá, </span>\n        <span data-testid=\"email-field\">\n          { email }\n        </span>\n        !\n        <div>\n          <span>Valor total: </span>\n          <span data-testid=\"total-field\">{ total }</span>\n          <span data-testid=\"header-currency-field\"> BRL</span>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string,\n  total: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  total: state.wallet.total,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { removeExpense, calculateTotal } from '../actions';\n\nclass ExpensesTable extends React.Component {\n  constructor() {\n    super();\n    this.deleteExpense = this.deleteExpense.bind(this);\n    this.state = {\n      tableHeading: ['Descrição', 'Tag',\n        'Método de pagamento', 'Valor', 'Moeda', 'Câmbio utilizado',\n        'Valor convertido', 'Moeda de conversão', 'Editar/Excluir'],\n    };\n  }\n\n  deleteExpense(expense) {\n    const { expenses, remove, globalTotal, newTotal } = this.props;\n    const newExpenses = expenses.filter((currExpense) => currExpense.id !== expense.id);\n    const currName = expense.currency;\n    const transf = expense.exchangeRates[currName].ask;\n    const sub = Number(expense.value * transf).toFixed(2);\n    newTotal(Number(globalTotal - sub).toFixed(2));\n    remove(newExpenses);\n  }\n\n  render() {\n    const { tableHeading } = this.state;\n    const { expenses } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr>\n            {tableHeading.map((headingText, key) => <th key={ key }>{headingText}</th>)}\n          </tr>\n        </thead>\n        <tbody>\n          {expenses.map((expense, key) => {\n            const currName = expense.currency;\n            return (\n              <tr key={ key }>\n                <td>{expense.description}</td>\n                <td>{expense.tag}</td>\n                <td>{expense.method}</td>\n                <td>{expense.value}</td>\n                <td>{expense.exchangeRates[currName].name.split('/')[0]}</td>\n                <td>{parseFloat(expense.exchangeRates[currName].ask).toFixed(2)}</td>\n                <td>\n                  {parseFloat(expense.value\n                    * expense.exchangeRates[currName].ask).toFixed(2)}\n                </td>\n                <td>Real</td>\n                <td>\n                  <button\n                    type=\"button\"\n                    data-testid=\"delete-btn\"\n                    onClick={ () => this.deleteExpense(expense) }\n                  >\n                    Deletar\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.object,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  globalTotal: state.wallet.total,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  remove: (expenses) => dispatch(removeExpense(expenses)),\n  newTotal: (total) => dispatch(calculateTotal(total)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesTable);\n","import React from 'react';\nimport Form from '../components/Form';\nimport Header from '../components/Header';\nimport ExpensesTable from '../components/ExpensesTable';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <Form />\n        <ExpensesTable />\n      </>\n    );\n  }\n}\n\nexport default (Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport login from './pages/Login';\nimport wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/expenses-wallet-project\" component={ login } />\n        <Route path=\"/expenses-wallet-project/carteira\" component={ wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { USER_LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nexport default function user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case USER_LOGIN:\n    return { ...state, email: action.payload.email };\n  default:\n    return state;\n  }\n}\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { ADD_EXPENSE, GET_CURRENCY, TOTAL_UPDATE, REMOVE_EXPENSE } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  total: 0,\n  exchangeRate: '',\n};\n\nexport default function wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case ADD_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.payload.expense],\n    };\n  case GET_CURRENCY:\n    return {\n      ...state,\n      currencies: action.payload.currency,\n    };\n  case TOTAL_UPDATE:\n    return {\n      ...state,\n      total: action.payload.value,\n    };\n  case REMOVE_EXPENSE:\n    return {\n      ...state,\n      expenses: action.payload.expenses,\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}